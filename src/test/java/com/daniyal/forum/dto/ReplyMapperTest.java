package com.daniyal.forum.dto;

import com.daniyal.forum.persistence.ReplyEntity;
import com.google.common.collect.ImmutableList;
import org.junit.jupiter.api.Test;
import org.mapstruct.factory.Mappers;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Random;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * This is a unit test for ReplyMapper implementation generated by MapStruct based on the interface definition.
 * It tests single Reply entity to DTO mapping, as well as list of entities to list of DTO mapping.
 */
class ReplyMapperTest {
    private final ReplyMapper replyMapper = Mappers.getMapper(ReplyMapper.class);
    private final Random random = new Random();

    @Test
    public void testMappingEntityToDto() {
        ReplyEntity replyEntity = new ReplyEntity();
        replyEntity.setId(random.nextLong());
        replyEntity.setAuthor("Author");
        replyEntity.setMessage("Message");
        replyEntity.setQuestionId(random.nextLong());
        replyEntity.setCreatedAt(OffsetDateTime.now());
        replyEntity.setUpdatedAt(OffsetDateTime.now());

        Reply reply = replyMapper.entityToReply(replyEntity);

        assertThat(reply)
                .hasFieldOrPropertyWithValue("id", reply.getId())
                .hasFieldOrPropertyWithValue("questionId", reply.getQuestionId())
                .hasFieldOrPropertyWithValue("author", "Author")
                .hasFieldOrPropertyWithValue("message", "Message");
    }

    @Test
    public void testMappingEntityToDtoWithEmptyFields() {
        ReplyEntity replyEntity = new ReplyEntity();
        Reply reply = replyMapper.entityToReply(replyEntity);

        assertThat(reply)
                .hasFieldOrPropertyWithValue("id", 0L)
                .hasFieldOrPropertyWithValue("questionId", null)
                .hasFieldOrPropertyWithValue("author", null)
                .hasFieldOrPropertyWithValue("message", null);
    }

    @Test
    public void testMappingEntityListToDtoList() {
        ReplyEntity replyEntity1 = new ReplyEntity();
        replyEntity1.setId(random.nextLong());
        replyEntity1.setAuthor("Author1");
        replyEntity1.setMessage("Message1");
        replyEntity1.setQuestionId(random.nextLong());
        replyEntity1.setCreatedAt(OffsetDateTime.now());
        replyEntity1.setUpdatedAt(OffsetDateTime.now());

        ReplyEntity replyEntity2 = new ReplyEntity();
        replyEntity2.setId(random.nextLong());
        replyEntity2.setAuthor("Author2");
        replyEntity2.setMessage("Message2");
        replyEntity2.setQuestionId(random.nextLong());
        replyEntity2.setCreatedAt(OffsetDateTime.now());
        replyEntity2.setUpdatedAt(OffsetDateTime.now());

        List<ReplyEntity> entityList = ImmutableList.of(replyEntity1, replyEntity2);
        List<Reply> dtoList = replyMapper.entityListToReplyList(entityList);

        for (int i = 0; i < 2; i++) {
            assertThat(dtoList.get(i))
                    .hasFieldOrPropertyWithValue("id", entityList.get(i).getId())
                    .hasFieldOrPropertyWithValue("questionId", entityList.get(i).getQuestionId())
                    .hasFieldOrPropertyWithValue("author", entityList.get(i).getAuthor())
                    .hasFieldOrPropertyWithValue("message", entityList.get(i).getMessage());
        }
    }
}
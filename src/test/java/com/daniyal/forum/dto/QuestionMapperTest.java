package com.daniyal.forum.dto;

import com.daniyal.forum.persistence.QuestionEntity;
import com.daniyal.forum.persistence.ReplyEntity;
import com.google.common.collect.ImmutableList;
import org.junit.jupiter.api.Test;
import org.mapstruct.factory.Mappers;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Random;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * This is a unit test for QuestionMapper implementation generated by MapStruct based on the interface definition.
 * It tests single Question entity to DTO mapping, as well as list of entities to list of DTO mapping. The class
 * also includes tests for mapping between QuestionEntity and Thread DTO.
 */
class QuestionMapperTest {
    private final QuestionMapper questionMapper = Mappers.getMapper(QuestionMapper.class);
    private final ReplyMapper replyMapper = Mappers.getMapper(ReplyMapper.class);
    private final Random random = new Random();

    @Test
    public void testMappingOfEntityToQuestionDto() {
        QuestionEntity questionEntity = new QuestionEntity();
        questionEntity.setAuthor("Author");
        questionEntity.setMessage("Message");
        questionEntity.setId(random.nextLong());
        questionEntity.setReplyCount(5);
        questionEntity.setCreatedAt(OffsetDateTime.now());
        questionEntity.setUpdatedAt(OffsetDateTime.now());

        Question question = questionMapper.entityToQuestion(questionEntity);

        assertThat(question)
                .hasFieldOrPropertyWithValue("id", questionEntity.getId())
                .hasFieldOrPropertyWithValue("author", "Author")
                .hasFieldOrPropertyWithValue("message", "Message")
                .hasFieldOrPropertyWithValue("replies", 5);
    }

    @Test
    public void testMappingOfEntityToQuestionDtoWithEmptyAttributes() {
        QuestionEntity questionEntity = new QuestionEntity();

        Question question = questionMapper.entityToQuestion(questionEntity);

        assertThat(question)
                .hasFieldOrPropertyWithValue("id", 0L)
                .hasFieldOrPropertyWithValue("author", null)
                .hasFieldOrPropertyWithValue("message", null)
                .hasFieldOrPropertyWithValue("replies", 0);
    }

    @Test
    public void testMappingOfEntityToThreadDto() {
        QuestionEntity questionEntity = new QuestionEntity();
        questionEntity.setAuthor("Author");
        questionEntity.setMessage("Message");
        questionEntity.setId(random.nextLong());
        questionEntity.setReplyCount(5);
        questionEntity.setCreatedAt(OffsetDateTime.now());
        questionEntity.setUpdatedAt(OffsetDateTime.now());

        ReplyEntity replyEntity = new ReplyEntity();
        replyEntity.setId(random.nextLong());
        replyEntity.setAuthor("Author2");
        replyEntity.setMessage("Message2");

        questionEntity.setReplies(ImmutableList.of(replyEntity));

        Thread thread = questionMapper.entityToThread(questionEntity);

        assertThat(thread)
                .as("Thread should have correct id, author and message")
                .hasFieldOrPropertyWithValue("id", questionEntity.getId())
                .hasFieldOrPropertyWithValue("author", "Author")
                .hasFieldOrPropertyWithValue("message", "Message");

        assertThat(thread.getReplies())
                .as("Reply list should have one element with correct value")
                .hasSize(1)
                .containsExactlyInAnyOrder(replyMapper.entityToReply(replyEntity));
    }

    @Test
    public void testMappingOfEntityToThreadDtoWithEmptyAttributes() {
        QuestionEntity questionEntity = new QuestionEntity();

        Thread thread = questionMapper.entityToThread(questionEntity);

        assertThat(thread)
                .hasFieldOrPropertyWithValue("id", 0L)
                .hasFieldOrPropertyWithValue("author", null)
                .hasFieldOrPropertyWithValue("message", null)
                .hasFieldOrPropertyWithValue("replies", null);
    }

    @Test
    public void testEntityListToQuestionList() {
        QuestionEntity questionEntity1 = new QuestionEntity();
        questionEntity1.setAuthor("Author");
        questionEntity1.setMessage("Message");
        questionEntity1.setId(random.nextLong());
        questionEntity1.setReplyCount(5);
        questionEntity1.setCreatedAt(OffsetDateTime.now());
        questionEntity1.setUpdatedAt(OffsetDateTime.now());

        QuestionEntity questionEntity2 = new QuestionEntity();
        questionEntity2.setAuthor("Author");
        questionEntity2.setMessage("Message");
        questionEntity2.setId(random.nextLong());
        questionEntity2.setReplyCount(10);
        questionEntity2.setCreatedAt(OffsetDateTime.now());
        questionEntity2.setUpdatedAt(OffsetDateTime.now());

        List<QuestionEntity> entityList = ImmutableList.of(questionEntity1, questionEntity2);
        Question[] dtoList = questionMapper.entityListToQuestionList(entityList);

        for (int i = 0; i < entityList.size(); i++) {
            assertThat(dtoList[i])
                    .hasFieldOrPropertyWithValue("id", entityList.get(i).getId())
                    .hasFieldOrPropertyWithValue("author", entityList.get(i).getAuthor())
                    .hasFieldOrPropertyWithValue("message", entityList.get(i).getMessage())
                    .hasFieldOrPropertyWithValue("replies", entityList.get(i).getReplyCount());
        }
    }
}
